// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        rangeX: {value: 0.0}
        rangeY: {value: 0.0}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if USE_VAGUE
    uniform Range{
        //x方向的模糊
        float rangeX;
        //y方向的模糊
        float rangeY;
    };

    vec4 getVague(){
        vec4 o = vec4(0, 0, 0, 0);
        vec2 base = vec2(0.01 * rangeX, 0.01 * rangeY);
        //*1.0转成小数
        //提高模糊精度，里中心像素近的较大
        o += texture(texture, v_uv0 + base * 1.0) * 0.05;
        o += texture(texture, v_uv0 + base * 0.5) * 0.2;
        o += texture(texture, v_uv0)*0.5;
        o += texture(texture, v_uv0 - base * 0.5) * 0.2;
        o += texture(texture, v_uv0 - base * 1.0) * 0.05;
        return o;
    }
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    #if USE_VAGUE
     o = getVague();
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
