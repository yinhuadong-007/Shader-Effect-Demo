// // Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        #描边颜色
        color: {
          value: [1.0, 1.0, 1.0, 1.0],
          editor: {
            tooltips: "描边颜色"
          }
        }
        #描边宽度
        outline: { value: 0.01 }
        # fuzzy: { value: 3.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%

CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <cc-global>
 
  in vec4 v_color;
 
  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
 
  //cocos规定在shader中所有非sampler的uniform都应以block形式声明
  uniform InputData{
    vec4 color;
    float outline;  //外部程序输入描边宽度1-1.0。
    // float fuzzy;
  };

  // float outline = 0.02;
 
  vec2 getDirection(float angle, vec2 pos){
    float rad = angle * 0.01745329252;
    vec2 offset = vec2( outline * cos(rad), outline * sin(rad));
    return offset;
  }
 
  //检查pos点是否需要描边
  bool checkIsMakeOutline(vec2 pos){
    //alpha检测值
    float alpha = 0.5;
    vec4 cr = texture(texture, pos);
    if(cr.a >= alpha || outline == 0.0)return false;

    float ang = 360.0/24.0;
    for( int i = 0; i < 24; i++){
      vec2 offset = getDirection( float(i) * ang, pos);
      cr = texture2D(texture, pos + offset);
      if( cr.a >= alpha){
        return true;
      }
    }
        
    //当前点已是纹理边缘
    if(pos.x <= outline || pos.x >= 1.0 - outline)return false;
    if(pos.y <= outline || pos.y >= 1.0 - outline)return false;
 
    return false;
  }
 
  void main () {
    vec4 o = vec4(1, 1, 1, 1);
 
    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif
 
    o *= v_color;
 
    ALPHA_TEST(o);
 
    if(checkIsMakeOutline(v_uv0)){
      //检查到v_uv0点需要描边，直接改变颜色值
      o = vec4(color.r, color.g, color.b, 1);
    }
 
    gl_FragColor = o;
  }
}%