{
  "ver": "1.0.25",
  "uuid": "529809e5-75ee-42c4-874c-07f5687362bd",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 color;\nuniform float outline;\nvec2 getDirection(float angle, vec2 pos){\n  float rad = angle * 0.01745329252;\n  vec2 offset = vec2( outline * cos(rad), outline * sin(rad));\n  return offset;\n}\nbool checkIsMakeOutline(vec2 pos){\n  float alpha = 0.5;\n  vec4 cr = texture2D(texture, pos);\n  if(cr.a >= alpha || outline == 0.0)return false;\n  float ang = 360.0/24.0;\n  for( int i = 0; i < 24; i++){\n    vec2 offset = getDirection( float(i) * ang, pos);\n    cr = texture2D(texture, pos + offset);\n    if( cr.a >= alpha){\n      return true;\n    }\n  }\n  if(pos.x <= outline || pos.x >= 1.0 - outline)return false;\n  if(pos.y <= outline || pos.y >= 1.0 - outline)return false;\n  return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if(checkIsMakeOutline(v_uv0)){\n    o = vec4(color.r, color.g, color.b, 1);\n  }\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform InputData{\n  vec4 color;\n  float outline;\n};\nvec2 getDirection(float angle, vec2 pos){\n  float rad = angle * 0.01745329252;\n  vec2 offset = vec2( outline * cos(rad), outline * sin(rad));\n  return offset;\n}\nbool checkIsMakeOutline(vec2 pos){\n  float alpha = 0.5;\n  vec4 cr = texture(texture, pos);\n  if(cr.a >= alpha || outline == 0.0)return false;\n  float ang = 360.0/24.0;\n  for( int i = 0; i < 24; i++){\n    vec2 offset = getDirection( float(i) * ang, pos);\n    cr = texture2D(texture, pos + offset);\n    if( cr.a >= alpha){\n      return true;\n    }\n  }\n  if(pos.x <= outline || pos.x >= 1.0 - outline)return false;\n  if(pos.y <= outline || pos.y >= 1.0 - outline)return false;\n  return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if(checkIsMakeOutline(v_uv0)){\n    o = vec4(color.r, color.g, color.b, 1);\n  }\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}