{
  "ver": "1.0.25",
  "uuid": "7c24b57e-e819-4fc9-a8d2-b06cf61b782d",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_ROUNDCORNER\nuniform float xRadius;\nuniform float yRadius;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_ROUNDCORNER\n  float ellipseXRadius = clamp(0.0, 0.5, xRadius);\n  float ellipseYRadius = clamp(0.0, 0.5, yRadius);\n  vec2 uv = v_uv0.xy - vec2(0.5, 0.5);\n  float rx = abs(uv.x) - (0.5 - ellipseXRadius);\n  float ry = abs(uv.y) - (0.5 - ellipseYRadius);\n  float mx = step(0.5 - ellipseXRadius, abs(uv.x));\n  float my = step(0.5 - ellipseYRadius, abs(uv.y));\n  float isOutOfEllipse = step(1.0, pow(rx, 2.0) / pow(xRadius, 2.0) + pow(ry, 2.0) / pow(yRadius, 2.0));\n  float angleInRadian = atan(ry / rx);\n  vec2 pointInEllipse = vec2(xRadius * cos(angleInRadian), yRadius * sin(angleInRadian));\n  vec2 pointInBigEllipse = vec2((xRadius * 1.01) * cos(angleInRadian), (yRadius * 1.01)* sin(angleInRadian));\n  float maxDis = distance(pointInBigEllipse, pointInEllipse);\n  float curDis = distance(vec2(rx, ry), pointInEllipse);\n  float smo = smoothstep(0.0, maxDis, curDis);\n  float alpha = 1.0 - mx * my * isOutOfEllipse * smo;\n  o = vec4(o.rgb, o.a * alpha);\n  #endif\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_ROUNDCORNER\nuniform RoundCorner {\n  float xRadius;\n  float yRadius;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_ROUNDCORNER\n  float ellipseXRadius = clamp(0.0, 0.5, xRadius);\n  float ellipseYRadius = clamp(0.0, 0.5, yRadius);\n  vec2 uv = v_uv0.xy - vec2(0.5, 0.5);\n  float rx = abs(uv.x) - (0.5 - ellipseXRadius);\n  float ry = abs(uv.y) - (0.5 - ellipseYRadius);\n  float mx = step(0.5 - ellipseXRadius, abs(uv.x));\n  float my = step(0.5 - ellipseYRadius, abs(uv.y));\n  float isOutOfEllipse = step(1.0, pow(rx, 2.0) / pow(xRadius, 2.0) + pow(ry, 2.0) / pow(yRadius, 2.0));\n  float angleInRadian = atan(ry / rx);\n  vec2 pointInEllipse = vec2(xRadius * cos(angleInRadian), yRadius * sin(angleInRadian));\n  vec2 pointInBigEllipse = vec2((xRadius * 1.01) * cos(angleInRadian), (yRadius * 1.01)* sin(angleInRadian));\n  float maxDis = distance(pointInBigEllipse, pointInEllipse);\n  float curDis = distance(vec2(rx, ry), pointInEllipse);\n  float smo = smoothstep(0.0, maxDis, curDis);\n  float alpha = 1.0 - mx * my * isOutOfEllipse * smo;\n  o = vec4(o.rgb, o.a * alpha);\n  #endif\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}