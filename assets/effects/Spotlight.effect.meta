{
  "ver": "1.0.25",
  "uuid": "97f7f68c-ab27-49c2-8caf-a31191107dd6",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_color = a_color;\n  v_uv0 = a_uv0;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec2 v_uv0;\n#if USE_TEXTURE\nuniform sampler2D texture;\n#endif\nuniform vec4 circle_center_x0;\nuniform vec4 circle_center_x1;\nuniform vec4 circle_center_x2;\nuniform vec4 circle_center_y0;\nuniform vec4 circle_center_y1;\nuniform vec4 circle_center_y2;\nuniform vec4 circle_r0;\nuniform vec4 circle_r1;\nuniform vec4 circle_r2;\nuniform vec4 circle_smooth0;\nuniform vec4 circle_smooth1;\nuniform vec4 circle_smooth2;\nuniform vec4 rect_center_x0;\nuniform vec4 rect_center_x1;\nuniform vec4 rect_center_x2;\nuniform vec4 rect_center_y0;\nuniform vec4 rect_center_y1;\nuniform vec4 rect_center_y2;\nuniform vec4 rect_w0;\nuniform vec4 rect_h0;\nuniform vec4 rect_w1;\nuniform vec4 rect_h1;\nuniform vec4 rect_w2;\nuniform vec4 rect_h2;\nuniform vec4 rect_smooth0;\nuniform vec4 rect_smooth1;\nuniform vec4 rect_smooth2;\nuniform float wh_ratio;\nvoid toArr(out float arr[12], vec4 v0, vec4 v1, vec4 v2) {\n  arr[0] = v0.r;\n  arr[1] = v0.g;\n  arr[2] = v0.b;\n  arr[3] = v0.a;\n  arr[4] = v1.r;\n  arr[5] = v1.g;\n  arr[6] = v1.b;\n  arr[7] = v1.a;\n  arr[8] = v2.r;\n  arr[9] = v2.g;\n  arr[10] = v2.b;\n  arr[11] = v2.a;\n}\nfloat getCircleA(float x_arr[12], float y_arr[12], float r_arr[12], float smooth_arr[12]) {\n  float circle_a = 1.0;\n  float cur_dist,cur_r,cur_smooth,new_a;\n  for (int i = 0; i < 12; i++)\n  {\n    if (r_arr[i] > 0.001 && (v_uv0.x - x_arr[i]) * wh_ratio < r_arr[i] && v_uv0.y - y_arr[i] < r_arr[i])\n    {\n      cur_dist = sqrt(pow((v_uv0.x - x_arr[i]) * wh_ratio, 2.0) + pow(v_uv0.y - y_arr[i], 2.0));\n      cur_r = r_arr[i];\n      cur_smooth = smooth_arr[i];\n      new_a = (smoothstep(cur_r - cur_smooth, cur_r, cur_dist));\n      circle_a *= new_a;\n    }\n  }\n  return circle_a;\n}\nfloat getRectA(float x_arr[12], float y_arr[12], float w_arr[12], float h_arr[12], float smooth_arr[12]) {\n  float ract_a = 1.0;\n  float x_dist,y_dist,cur_dist,cur_r,cur_smooth,new_a;\n  for (int i = 0; i < 12; i++)\n  {\n    if ((w_arr[i] > 0.001 || h_arr[i] > 0.001) && (v_uv0.x - x_arr[i]) * wh_ratio < w_arr[i] && v_uv0.y - y_arr[i]<h_arr[i])\n    {\n      x_dist = abs((v_uv0.x - x_arr[i]) * wh_ratio);\n      y_dist = abs(v_uv0.y - y_arr[i]);\n      if (w_arr[i] / 2.0 - x_dist < h_arr[i] / 2.0  - y_dist) {\n        cur_dist = x_dist;\n        cur_r = w_arr[i] / 2.0;\n      } else {\n        cur_dist = y_dist;\n        cur_r = h_arr[i] / 2.0;\n      }\n      cur_smooth = smooth_arr[i];\n      new_a = (smoothstep(cur_r - cur_smooth, cur_r, cur_dist));\n      ract_a *= new_a;\n    }\n  }\n  return ract_a;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float circle_center_x_list[12];\n  toArr(circle_center_x_list, circle_center_x0, circle_center_x1, circle_center_x2);\n  float circle_center_y_list[12];\n  toArr(circle_center_y_list, circle_center_y0, circle_center_y1, circle_center_y2);\n  float circle_r_list[12];\n  toArr(circle_r_list, circle_r0, circle_r1, circle_r2);\n  float circle_smooth_list[12];\n  toArr(circle_smooth_list, circle_smooth0, circle_smooth1, circle_smooth2);\n  float circleA = getCircleA(circle_center_x_list, circle_center_y_list, circle_r_list, circle_smooth_list);\n  float rect_center_x_list[12];\n  toArr(rect_center_x_list, rect_center_x0, rect_center_x1, rect_center_x2);\n  float rect_center_y_list[12];\n  toArr(rect_center_y_list, rect_center_y0, rect_center_y1, rect_center_y2);\n  float rect_w_list[12];\n  toArr(rect_w_list, rect_w0, rect_w1, rect_w2);\n  float rect_h_list[12];\n  toArr(rect_h_list, rect_h0, rect_h1, rect_h2);\n  float rect_smooth_list[12];\n  toArr(rect_smooth_list, rect_smooth0, rect_smooth1, rect_smooth2);\n  float rectA = getRectA(rect_center_x_list, rect_center_y_list, rect_w_list, rect_h_list, rect_smooth_list);\n  o.a = circleA * rectA;\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_color = a_color;\n  v_uv0 = a_uv0;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec2 v_uv0;\n#if USE_TEXTURE\nuniform sampler2D texture;\n#endif\nuniform LIGHT {\n  vec4 circle_center_x0;\n  vec4 circle_center_x1;\n  vec4 circle_center_x2;\n  vec4 circle_center_y0;\n  vec4 circle_center_y1;\n  vec4 circle_center_y2;\n  vec4 circle_r0;\n  vec4 circle_r1;\n  vec4 circle_r2;\n  vec4 circle_smooth0;\n  vec4 circle_smooth1;\n  vec4 circle_smooth2;\n  vec4 rect_center_x0;\n  vec4 rect_center_x1;\n  vec4 rect_center_x2;\n  vec4 rect_center_y0;\n  vec4 rect_center_y1;\n  vec4 rect_center_y2;\n  vec4 rect_w0;\n  vec4 rect_h0;\n  vec4 rect_w1;\n  vec4 rect_h1;\n  vec4 rect_w2;\n  vec4 rect_h2;\n  vec4 rect_smooth0;\n  vec4 rect_smooth1;\n  vec4 rect_smooth2;\n  float wh_ratio;\n};\nvoid toArr(out float arr[12], vec4 v0, vec4 v1, vec4 v2) {\n  arr[0] = v0.r;\n  arr[1] = v0.g;\n  arr[2] = v0.b;\n  arr[3] = v0.a;\n  arr[4] = v1.r;\n  arr[5] = v1.g;\n  arr[6] = v1.b;\n  arr[7] = v1.a;\n  arr[8] = v2.r;\n  arr[9] = v2.g;\n  arr[10] = v2.b;\n  arr[11] = v2.a;\n}\nfloat getCircleA(float x_arr[12], float y_arr[12], float r_arr[12], float smooth_arr[12]) {\n  float circle_a = 1.0;\n  float cur_dist,cur_r,cur_smooth,new_a;\n  for (int i = 0; i < 12; i++)\n  {\n    if (r_arr[i] > 0.001 && (v_uv0.x - x_arr[i]) * wh_ratio < r_arr[i] && v_uv0.y - y_arr[i] < r_arr[i])\n    {\n      cur_dist = sqrt(pow((v_uv0.x - x_arr[i]) * wh_ratio, 2.0) + pow(v_uv0.y - y_arr[i], 2.0));\n      cur_r = r_arr[i];\n      cur_smooth = smooth_arr[i];\n      new_a = (smoothstep(cur_r - cur_smooth, cur_r, cur_dist));\n      circle_a *= new_a;\n    }\n  }\n  return circle_a;\n}\nfloat getRectA(float x_arr[12], float y_arr[12], float w_arr[12], float h_arr[12], float smooth_arr[12]) {\n  float ract_a = 1.0;\n  float x_dist,y_dist,cur_dist,cur_r,cur_smooth,new_a;\n  for (int i = 0; i < 12; i++)\n  {\n    if ((w_arr[i] > 0.001 || h_arr[i] > 0.001) && (v_uv0.x - x_arr[i]) * wh_ratio < w_arr[i] && v_uv0.y - y_arr[i]<h_arr[i])\n    {\n      x_dist = abs((v_uv0.x - x_arr[i]) * wh_ratio);\n      y_dist = abs(v_uv0.y - y_arr[i]);\n      if (w_arr[i] / 2.0 - x_dist < h_arr[i] / 2.0  - y_dist) {\n        cur_dist = x_dist;\n        cur_r = w_arr[i] / 2.0;\n      } else {\n        cur_dist = y_dist;\n        cur_r = h_arr[i] / 2.0;\n      }\n      cur_smooth = smooth_arr[i];\n      new_a = (smoothstep(cur_r - cur_smooth, cur_r, cur_dist));\n      ract_a *= new_a;\n    }\n  }\n  return ract_a;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float circle_center_x_list[12];\n  toArr(circle_center_x_list, circle_center_x0, circle_center_x1, circle_center_x2);\n  float circle_center_y_list[12];\n  toArr(circle_center_y_list, circle_center_y0, circle_center_y1, circle_center_y2);\n  float circle_r_list[12];\n  toArr(circle_r_list, circle_r0, circle_r1, circle_r2);\n  float circle_smooth_list[12];\n  toArr(circle_smooth_list, circle_smooth0, circle_smooth1, circle_smooth2);\n  float circleA = getCircleA(circle_center_x_list, circle_center_y_list, circle_r_list, circle_smooth_list);\n  float rect_center_x_list[12];\n  toArr(rect_center_x_list, rect_center_x0, rect_center_x1, rect_center_x2);\n  float rect_center_y_list[12];\n  toArr(rect_center_y_list, rect_center_y0, rect_center_y1, rect_center_y2);\n  float rect_w_list[12];\n  toArr(rect_w_list, rect_w0, rect_w1, rect_w2);\n  float rect_h_list[12];\n  toArr(rect_h_list, rect_h0, rect_h1, rect_h2);\n  float rect_smooth_list[12];\n  toArr(rect_smooth_list, rect_smooth0, rect_smooth1, rect_smooth2);\n  float rectA = getRectA(rect_center_x_list, rect_center_y_list, rect_w_list, rect_h_list, rect_smooth_list);\n  o.a = circleA * rectA;\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}