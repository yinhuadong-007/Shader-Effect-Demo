// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_width: { value: 100 }
        u_height: { value: 100 }
        u_radius: { value: 20 }
        u_radius_left_bottom: { value: -1.0 }
        u_radius_right_top: { value: -1.0 }
        u_radius_right_bottom: { value: -1.0 }
        u_cut_x: { value: -1.0 }
        u_cut_y: { value: -1.0 }
        u_cut_width: { value: -1.0 }
        u_cut_height: { value: -1.0 }
        u_normal: {value: 1.0}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Float {
    float u_width;
    float u_height;
    float u_radius;
    float u_radius_left_bottom;
    float u_radius_right_top;
    float u_radius_right_bottom;
    float u_cut_x;
    float u_cut_y;
    float u_cut_width;
    float u_cut_height;
    float u_normal;
  };

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    float w = u_width;
    float h = u_height;

    float r = u_radius;
    float r2 = u_radius_left_bottom;
    float r3 = u_radius_right_top;
    float r4 = u_radius_right_bottom;

    // 其他3个角-1时，表示统一用r值
    r2 = r2 == -1.0 ? r : r2;
    r3 = r3 == -1.0 ? r : r3;
    r4 = r4 == -1.0 ? r : r4;

    float x = v_uv0.x * w;
    float y = v_uv0.y * h;

    float dtX = 0.0;
    float dtY = 0.0;
    float dtW = 0.0;
    float dtH = 0.0;

    if (u_cut_x != -1.0 && u_cut_y != -1.0) {
      dtX = u_cut_x;
      dtY = u_cut_y;
      dtW = w - u_cut_width;
      dtH = h - u_cut_height;

      // 四边 
      if (u_normal == 1.0) {
        if (x < dtX || y < dtY || x > u_cut_x + u_cut_width || y > u_cut_y + u_cut_height) {
          o.a = 0.0;
        }
      }
    }

    float xx = x - dtX;
    float yy = y - dtY;
    float ww = w - dtW;
    float hh = h - dtH;

    if (u_normal == 1.0) 
    {
      //左上角
      if (xx < r && yy < r) {
          if ((xx - r) * (xx - r) + (yy - r) * (yy - r) > r * r) {
              o.a = 0.0;
          }
      }

      //左下角
      if (xx < r2 && yy > (hh - r2)) {
          if ((xx - r2) * (xx - r2) + (yy - (hh - r2)) * (yy - (hh - r2)) > r2 * r2) {
              o.a = 0.0;
          }
      }

      //右上角
      if (xx > (ww - r3) && yy < r3) {
          if ((xx - (ww - r3)) * (xx - (ww - r3)) + (yy - r3) * (yy - r3) > r3 * r3) {
              o.a = 0.0;
          }
      }

      //右下角
      if (xx > (ww - r4) && yy > (hh - r4)) {
          if ((xx - (ww - r4)) * (xx - (ww - r4)) + (yy - (hh - r4)) * (yy - (hh - r4)) > r4 * r4) {
              o.a = 0.0;
          }
      }
    }
    else 
    {
      if (x >= dtX && y >= dtY && x <= u_cut_x + u_cut_width && y <= u_cut_y + u_cut_height) {
        bool cut = true;
        //左上角
        if (xx < r && yy < r) {
            if ((xx - r) * (xx - r) + (yy - r) * (yy - r) > r * r) {
                cut = false;
            }
        }

        //左下角
        if (xx < r2 && yy > (hh - r2)) {
            if ((xx - r2) * (xx - r2) + (yy - (hh - r2)) * (yy - (hh - r2)) > r2 * r2) {
                cut = false;
            }
        }

        //右上角
        if (xx > (ww - r3) && yy < r3) {
            if ((xx - (ww - r3)) * (xx - (ww - r3)) + (yy - r3) * (yy - r3) > r3 * r3) {
                cut = false;
            }
        }

        //右下角
        if (xx > (ww - r4) && yy > (hh - r4)) {
            if ((xx - (ww - r4)) * (xx - (ww - r4)) + (yy - (hh - r4)) * (yy - (hh - r4)) > r4 * r4) {
                cut = false;
            }
        }

        if (cut) {
          o.a = 0.0;
        }
      }
    }

    gl_FragColor = o;
  }
}%
