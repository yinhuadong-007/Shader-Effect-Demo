{
  "ver": "1.0.25",
  "uuid": "a5ecbd67-d396-4d5c-8f0d-cdc0273acbc2",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float u_cut_x;\nuniform float u_cut_y;\nuniform float u_normal;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float t_x = u_cut_x;\n  float t_y = u_cut_y;\n  float t_r = u_radius;\n  float c_x = v_uv0.x;\n  float c_y = v_uv0.y;\n  float c_len = ((c_x - t_x) * (c_x - t_x) + (c_y - t_y) * (c_y - t_y));\n  float t_len = (t_r * t_r);\n  float a = 0.0;\n  if(c_len > t_len){\n    if(u_normal == 1.0){\n      a = 1.0 - smoothstep(0.0, t_r * 0.01, c_len - t_len);\n      o.a *= a;\n    }\n  }else{\n    if(u_normal != 1.0){\n      a = 1.0 - smoothstep(0.0, t_r * 0.01, t_len - c_len);\n      o.a *= a;\n    }\n  }\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform CircleParam{\n  float u_cut_x;\n  float u_cut_y;\n  float u_radius_x;\n  float u_radius_y;\n  float u_normal;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float t_x = u_cut_x;\n  float t_y = u_cut_y;\n  float t_r = u_radius;\n  float c_x = v_uv0.x;\n  float c_y = v_uv0.y;\n  float c_len = ((c_x - t_x) * (c_x - t_x) + (c_y - t_y) * (c_y - t_y));\n  float t_len = (t_r * t_r);\n  float a = 0.0;\n  if(c_len > t_len){\n    if(u_normal == 1.0){\n      a = 1.0 - smoothstep(0.0, t_r * 0.01, c_len - t_len);\n      o.a *= a;\n    }\n  }else{\n    if(u_normal != 1.0){\n      a = 1.0 - smoothstep(0.0, t_r * 0.01, t_len - c_len);\n      o.a *= a;\n    }\n  }\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}