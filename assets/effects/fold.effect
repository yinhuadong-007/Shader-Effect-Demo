// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture0: { value: white }
        texture1: { value: white }
        
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  
  #endif
  in float a_isFront;
  out float v_isFront;

  
  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    
    #endif
    v_isFront = a_isFront;
    v_color = a_color;
    
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture0;
  uniform sampler2D texture1;
  in float v_isFront;

  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture0, v_uv0);
    float a = o.a;
    if(a < 0.1){
      discard;
    }else{
      if(v_isFront >= 0.0){
        // CCTexture(texture0, v_uv0, o);
      }
      else{
        // CCTexture(texture1, v_uv0, o);
          o = texture(texture1, v_uv0);
          o.a = a;
          // o = vec4(1, 1, 1, o.a);
      }
    }
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
