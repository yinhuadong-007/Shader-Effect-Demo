{
  "ver": "1.0.25",
  "uuid": "aca18c59-f659-4f9c-9eb6-d9eee8461e61",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float u_width;\nuniform float u_height;\nuniform float u_radius;\nuniform float u_radius_left_bottom;\nuniform float u_radius_right_top;\nuniform float u_radius_right_bottom;\nuniform float u_cut_x;\nuniform float u_cut_y;\nuniform float u_cut_width;\nuniform float u_cut_height;\nuniform float u_normal;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float w = u_width;\n  float h = u_height;\n  float r = u_radius;\n  float r2 = u_radius_left_bottom;\n  float r3 = u_radius_right_top;\n  float r4 = u_radius_right_bottom;\n  r2 = r2 == -1.0 ? r : r2;\n  r3 = r3 == -1.0 ? r : r3;\n  r4 = r4 == -1.0 ? r : r4;\n  float x = v_uv0.x * w;\n  float y = v_uv0.y * h;\n  float dtX = 0.0;\n  float dtY = 0.0;\n  float dtW = 0.0;\n  float dtH = 0.0;\n  if (u_cut_x != -1.0 && u_cut_y != -1.0) {\n    dtX = u_cut_x;\n    dtY = u_cut_y;\n    dtW = w - u_cut_width;\n    dtH = h - u_cut_height;\n    if (u_normal == 1.0) {\n      if (x < dtX || y < dtY || x > u_cut_x + u_cut_width || y > u_cut_y + u_cut_height) {\n        o.a = 0.0;\n      }\n    }\n  }\n  float xx = x - dtX;\n  float yy = y - dtY;\n  float ww = w - dtW;\n  float hh = h - dtH;\n  if (u_normal == 1.0)\n  {\n    if (xx < r && yy < r) {\n        if ((xx - r) * (xx - r) + (yy - r) * (yy - r) > r * r) {\n            o.a = 0.0;\n        }\n    }\n    if (xx < r2 && yy > (hh - r2)) {\n        if ((xx - r2) * (xx - r2) + (yy - (hh - r2)) * (yy - (hh - r2)) > r2 * r2) {\n            o.a = 0.0;\n        }\n    }\n    if (xx > (ww - r3) && yy < r3) {\n        if ((xx - (ww - r3)) * (xx - (ww - r3)) + (yy - r3) * (yy - r3) > r3 * r3) {\n            o.a = 0.0;\n        }\n    }\n    if (xx > (ww - r4) && yy > (hh - r4)) {\n        if ((xx - (ww - r4)) * (xx - (ww - r4)) + (yy - (hh - r4)) * (yy - (hh - r4)) > r4 * r4) {\n            o.a = 0.0;\n        }\n    }\n  }\n  else\n  {\n    if (x >= dtX && y >= dtY && x <= u_cut_x + u_cut_width && y <= u_cut_y + u_cut_height) {\n      bool cut = true;\n      if (xx < r && yy < r) {\n          if ((xx - r) * (xx - r) + (yy - r) * (yy - r) > r * r) {\n              cut = false;\n          }\n      }\n      if (xx < r2 && yy > (hh - r2)) {\n          if ((xx - r2) * (xx - r2) + (yy - (hh - r2)) * (yy - (hh - r2)) > r2 * r2) {\n              cut = false;\n          }\n      }\n      if (xx > (ww - r3) && yy < r3) {\n          if ((xx - (ww - r3)) * (xx - (ww - r3)) + (yy - r3) * (yy - r3) > r3 * r3) {\n              cut = false;\n          }\n      }\n      if (xx > (ww - r4) && yy > (hh - r4)) {\n          if ((xx - (ww - r4)) * (xx - (ww - r4)) + (yy - (hh - r4)) * (yy - (hh - r4)) > r4 * r4) {\n              cut = false;\n          }\n      }\n      if (cut) {\n        o.a = 0.0;\n      }\n    }\n  }\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Float {\n  float u_width;\n  float u_height;\n  float u_radius;\n  float u_radius_left_bottom;\n  float u_radius_right_top;\n  float u_radius_right_bottom;\n  float u_cut_x;\n  float u_cut_y;\n  float u_cut_width;\n  float u_cut_height;\n  float u_normal;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float w = u_width;\n  float h = u_height;\n  float r = u_radius;\n  float r2 = u_radius_left_bottom;\n  float r3 = u_radius_right_top;\n  float r4 = u_radius_right_bottom;\n  r2 = r2 == -1.0 ? r : r2;\n  r3 = r3 == -1.0 ? r : r3;\n  r4 = r4 == -1.0 ? r : r4;\n  float x = v_uv0.x * w;\n  float y = v_uv0.y * h;\n  float dtX = 0.0;\n  float dtY = 0.0;\n  float dtW = 0.0;\n  float dtH = 0.0;\n  if (u_cut_x != -1.0 && u_cut_y != -1.0) {\n    dtX = u_cut_x;\n    dtY = u_cut_y;\n    dtW = w - u_cut_width;\n    dtH = h - u_cut_height;\n    if (u_normal == 1.0) {\n      if (x < dtX || y < dtY || x > u_cut_x + u_cut_width || y > u_cut_y + u_cut_height) {\n        o.a = 0.0;\n      }\n    }\n  }\n  float xx = x - dtX;\n  float yy = y - dtY;\n  float ww = w - dtW;\n  float hh = h - dtH;\n  if (u_normal == 1.0)\n  {\n    if (xx < r && yy < r) {\n        if ((xx - r) * (xx - r) + (yy - r) * (yy - r) > r * r) {\n            o.a = 0.0;\n        }\n    }\n    if (xx < r2 && yy > (hh - r2)) {\n        if ((xx - r2) * (xx - r2) + (yy - (hh - r2)) * (yy - (hh - r2)) > r2 * r2) {\n            o.a = 0.0;\n        }\n    }\n    if (xx > (ww - r3) && yy < r3) {\n        if ((xx - (ww - r3)) * (xx - (ww - r3)) + (yy - r3) * (yy - r3) > r3 * r3) {\n            o.a = 0.0;\n        }\n    }\n    if (xx > (ww - r4) && yy > (hh - r4)) {\n        if ((xx - (ww - r4)) * (xx - (ww - r4)) + (yy - (hh - r4)) * (yy - (hh - r4)) > r4 * r4) {\n            o.a = 0.0;\n        }\n    }\n  }\n  else\n  {\n    if (x >= dtX && y >= dtY && x <= u_cut_x + u_cut_width && y <= u_cut_y + u_cut_height) {\n      bool cut = true;\n      if (xx < r && yy < r) {\n          if ((xx - r) * (xx - r) + (yy - r) * (yy - r) > r * r) {\n              cut = false;\n          }\n      }\n      if (xx < r2 && yy > (hh - r2)) {\n          if ((xx - r2) * (xx - r2) + (yy - (hh - r2)) * (yy - (hh - r2)) > r2 * r2) {\n              cut = false;\n          }\n      }\n      if (xx > (ww - r3) && yy < r3) {\n          if ((xx - (ww - r3)) * (xx - (ww - r3)) + (yy - r3) * (yy - r3) > r3 * r3) {\n              cut = false;\n          }\n      }\n      if (xx > (ww - r4) && yy > (hh - r4)) {\n          if ((xx - (ww - r4)) * (xx - (ww - r4)) + (yy - (hh - r4)) * (yy - (hh - r4)) > r4 * r4) {\n              cut = false;\n          }\n      }\n      if (cut) {\n        o.a = 0.0;\n      }\n    }\n  }\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}